var uniqueRandom = function (min, max) {
	var prev;
	return function rand() {
		var num = Math.floor(Math.random() * (max - min + 1) + min);
		return prev = num === prev && min !== max ? rand() : num;
	};
};

var uniqueRandomArray = function (arr) {
	var rand = uniqueRandom(0, arr.length - 1);

	return function () {
		return arr[rand()];
	};
};

var require$$1 = [
  [
    "#FACA9B",
    "#FDD09F",
    "#F3D89F",
    "#E7DF86",
    "#C0BA78"
  ],
  [
    "#59A9C2",
    "#65878F",
    "#6E5D4B",
    "#6A5A15",
    "#61381B"
  ],
  [
    "#4CD4B0",
    "#FFFCE6",
    "#EDD834",
    "#F24D16",
    "#7D1424"
  ],
  [
    "#E7E7DE",
    "#CDCBA6",
    "#008891",
    "#00587A",
    "#0F3057"
  ],
  [
    "#D4DBC8",
    "#DBD880",
    "#F9AE74",
    "#CD6B97",
    "#557780"
  ],
  [
    "#444B54",
    "#8199A3",
    "#B5AFA2",
    "#E1B493",
    "#F7D6B5"
  ],
  [
    "#FF9F55",
    "#FF8B55",
    "#FF7E55",
    "#FADAA3",
    "#FF7055"
  ],
  [
    "#5C9F97",
    "#DED7E6",
    "#D4AF61",
    "#5B2314",
    "#97B088"
  ],
  [
    "#1F9EA3",
    "#F8BD97",
    "#3B0102",
    "#9E5428",
    "#BFB992"
  ],
  [
    "#F0F1F5",
    "#112233",
    "#66CC99",
    "#44BBFF",
    "#FC575E"
  ],
  [
    "#34495E",
    "#2980B9",
    "#27AE60",
    "#E67E22",
    "#ECF0F1"
  ],
  [
    "#E6567A",
    "#BF4A67",
    "#3B3C3D",
    "#47C9AF",
    "#44B39D"
  ],
  [
    "#462446",
    "#B05F6D",
    "#EB6B56",
    "#FFC153",
    "#47B39D"
  ],
  [
    "#F7E999",
    "#D3EBB2",
    "#5B4B27",
    "#A42A15",
    "#D3E9BA"
  ],
  [
    "#F2F8EA",
    "#6797A1",
    "#FABFA1",
    "#E3E7B1",
    "#ECEFA9"
  ],
  [
    "#D1CD8E",
    "#BE8B5C",
    "#B86A54",
    "#BA5445",
    "#9E3E25"
  ],
  [
    "#BADEB2",
    "#87E8C6",
    "#8BCBDE",
    "#8FA8F6",
    "#B0A4BE"
  ],
  [
    "#203040",
    "#E7F76D",
    "#D1D6A9",
    "#EAF2BB",
    "#F7BC05"
  ],
  [
    "#D1D5D8",
    "#3498DB",
    "#F1C40F",
    "#E74C3C",
    "#1ABC9C"
  ],
  [
    "#6D4B11",
    "#563D28",
    "#3F303F",
    "#282256",
    "#11156D"
  ],
  [
    "#F4EDF6",
    "#F8D9D5",
    "#D8E2EC",
    "#F2E4F9",
    "#FDE1F7"
  ],
  [
    "#1BBC9B",
    "#16A086",
    "#1BA39C",
    "#0B8389",
    "#0F6177"
  ],
  [
    "#FCEBB6",
    "#5E412F",
    "#F07818",
    "#F0A830",
    "#78C0A8"
  ],
  [
    "#776F70",
    "#E36937",
    "#BBA900",
    "#005057",
    "#E91818"
  ],
  [
    "#B8B89F",
    "#DC9855",
    "#FF770B",
    "#816432",
    "#025159"
  ],
  [
    "#59AE7F",
    "#64C4AF",
    "#91CED7",
    "#CCEBC0",
    "#D9F5BE"
  ],
  [
    "#785EDD",
    "#8657DB",
    "#453E4A",
    "#9E58DC",
    "#AE44C8"
  ],
  [
    "#C9C1FE",
    "#82B9AD",
    "#7A922D",
    "#722809",
    "#360528"
  ],
  [
    "#EE7469",
    "#FFF0D6",
    "#B8959B",
    "#836D6F",
    "#383732"
  ],
  [
    "#54ACD2",
    "#5991B1",
    "#5F7187",
    "#48569E",
    "#8B4D93"
  ],
  [
    "#4A4E4D",
    "#0E9AA7",
    "#3DA4AB",
    "#F6CD61",
    "#FE8A71"
  ],
  [
    "#6BB18C",
    "#ECDAAF",
    "#EBCB94",
    "#EF9688",
    "#DC626F"
  ],
  [
    "#FE6860",
    "#FE8A71",
    "#F3C9BF",
    "#D9BBAE",
    "#0C545C"
  ],
  [
    "#C9C7AF",
    "#4387B5",
    "#7D7870",
    "#6157D4",
    "#A14C10"
  ],
  [
    "#10D2E5",
    "#81E2E6",
    "#93BFB6",
    "#977BAB",
    "#6F2480"
  ],
  [
    "#42787A",
    "#409C97",
    "#F8E8B5",
    "#F0340F",
    "#331B17"
  ],
  [
    "#34495E",
    "#4F8677",
    "#6B9B61",
    "#8F934D",
    "#B17E22"
  ],
  [
    "#413333",
    "#48393C",
    "#744C40",
    "#98583F",
    "#FF7B2C"
  ],
  [
    "#4D545E",
    "#586474",
    "#72CCCA",
    "#E2D6BE",
    "#BD3C4E"
  ],
  [
    "#CA6769",
    "#F4998A",
    "#F0B799",
    "#F4D6A0",
    "#CDC99F"
  ],
  [
    "#528CCB",
    "#F31D2F",
    "#FF8600",
    "#00D717",
    "#BF4ACC"
  ],
  [
    "#F1C40F",
    "#E67E22",
    "#E74C3C",
    "#ECF0F1",
    "#95A5A6"
  ],
  [
    "#FFFFF7",
    "#73B1D6",
    "#4589B0",
    "#1D628B",
    "#444444"
  ],
  [
    "#5A5A5A",
    "#F8F8F8",
    "#D6D6D6",
    "#72BAAC",
    "#EE7546"
  ],
  [
    "#EE5F5B",
    "#F89406",
    "#FFF457",
    "#62C462",
    "#5BC0DE"
  ],
  [
    "#ECF0F1",
    "#1ABC9C",
    "#16A085",
    "#2C3E50",
    "#E74C3C"
  ],
  [
    "#7CA39C",
    "#7F8E8B",
    "#4D4D4D",
    "#B27257",
    "#FF5D19"
  ],
  [
    "#455869",
    "#3B7E87",
    "#9EA97F",
    "#D1AA7F",
    "#F8BC86"
  ],
  [
    "#11132F",
    "#263D4E",
    "#4A6B4E",
    "#918E45",
    "#D9983E"
  ],
  [
    "#726680",
    "#FF520F",
    "#0FBAB7",
    "#B8B6A6",
    "#75536C"
  ]
];

// Generated by LiveScript 1.6.0
var apply, curry, flip, fix, over, memoize, toString$ = {}.toString;
apply = curry$(function(f, list){
  return f.apply(null, list);
});
curry = function(f){
  return curry$(f);
};
flip = curry$(function(f, x, y){
  return f(y, x);
});
fix = function(f){
  return function(g){
    return function(){
      return f(g(g)).apply(null, arguments);
    };
  }(function(g){
    return function(){
      return f(g(g)).apply(null, arguments);
    };
  });
};
over = curry$(function(f, g, x, y){
  return f(g(x), g(y));
});
memoize = function(f){
  var memo;
  memo = {};
  return function(){
    var args, res$, i$, to$, key, arg;
    res$ = [];
    for (i$ = 0, to$ = arguments.length; i$ < to$; ++i$) {
      res$.push(arguments[i$]);
    }
    args = res$;
    key = (function(){
      var i$, ref$, len$, results$ = [];
      for (i$ = 0, len$ = (ref$ = args).length; i$ < len$; ++i$) {
        arg = ref$[i$];
        results$.push(arg + toString$.call(arg).slice(8, -1));
      }
      return results$;
    }()).join('');
    return memo[key] = key in memo
      ? memo[key]
      : f.apply(null, args);
  };
};
var Func = {
  curry: curry,
  flip: flip,
  fix: fix,
  apply: apply,
  over: over,
  memoize: memoize
};
function curry$(f, bound){
  var context,
  _curry = function(args) {
    return f.length > 1 ? function(){
      var params = args ? args.concat() : [];
      context = bound ? context || this : this;
      return params.push.apply(params, arguments) <
          f.length && arguments.length ?
        _curry.call(context, params) : f.apply(context, params);
    } : f;
  };
  return _curry();
}

// Generated by LiveScript 1.6.0
var each, map, compact, filter, reject, remove, partition, find, head, first, tail, last, initial, empty, reverse, unique, uniqueBy, fold, foldl, fold1, foldl1, foldr, foldr1, unfoldr, concat, concatMap, flatten, difference, intersection, union, countBy, groupBy, andList, orList, any, all, sort, sortWith, sortBy, sum, product, mean, average, maximum, minimum, maximumBy, minimumBy, scan, scanl, scan1, scanl1, scanr, scanr1, slice, take, drop, splitAt, takeWhile, dropWhile, span, breakList, zip, zipWith, zipAll, zipAllWith, at, elemIndex, elemIndices, findIndex, findIndices, toString$$1 = {}.toString;
each = curry$$1(function(f, xs){
  var i$, len$, x;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    f(x);
  }
  return xs;
});
map = curry$$1(function(f, xs){
  var i$, len$, x, results$ = [];
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    results$.push(f(x));
  }
  return results$;
});
compact = function(xs){
  var i$, len$, x, results$ = [];
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    if (x) {
      results$.push(x);
    }
  }
  return results$;
};
filter = curry$$1(function(f, xs){
  var i$, len$, x, results$ = [];
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    if (f(x)) {
      results$.push(x);
    }
  }
  return results$;
});
reject = curry$$1(function(f, xs){
  var i$, len$, x, results$ = [];
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    if (!f(x)) {
      results$.push(x);
    }
  }
  return results$;
});
remove = curry$$1(function(el, xs){
  var i, x$;
  i = elemIndex(el, xs);
  x$ = xs.slice();
  if (i != null) {
    x$.splice(i, 1);
  }
  return x$;
});
partition = curry$$1(function(f, xs){
  var passed, failed, i$, len$, x;
  passed = [];
  failed = [];
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    (f(x) ? passed : failed).push(x);
  }
  return [passed, failed];
});
find = curry$$1(function(f, xs){
  var i$, len$, x;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    if (f(x)) {
      return x;
    }
  }
});
head = first = function(xs){
  return xs[0];
};
tail = function(xs){
  if (!xs.length) {
    return;
  }
  return xs.slice(1);
};
last = function(xs){
  return xs[xs.length - 1];
};
initial = function(xs){
  if (!xs.length) {
    return;
  }
  return xs.slice(0, -1);
};
empty = function(xs){
  return !xs.length;
};
reverse = function(xs){
  return xs.concat().reverse();
};
unique = function(xs){
  var result, i$, len$, x;
  result = [];
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    if (!in$(x, result)) {
      result.push(x);
    }
  }
  return result;
};
uniqueBy = curry$$1(function(f, xs){
  var seen, i$, len$, x, val, results$ = [];
  seen = [];
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    val = f(x);
    if (in$(val, seen)) {
      continue;
    }
    seen.push(val);
    results$.push(x);
  }
  return results$;
});
fold = foldl = curry$$1(function(f, memo, xs){
  var i$, len$, x;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    memo = f(memo, x);
  }
  return memo;
});
fold1 = foldl1 = curry$$1(function(f, xs){
  return fold(f, xs[0], xs.slice(1));
});
foldr = curry$$1(function(f, memo, xs){
  var i$, x;
  for (i$ = xs.length - 1; i$ >= 0; --i$) {
    x = xs[i$];
    memo = f(x, memo);
  }
  return memo;
});
foldr1 = curry$$1(function(f, xs){
  return foldr(f, xs[xs.length - 1], xs.slice(0, -1));
});
unfoldr = curry$$1(function(f, b){
  var result, x, that;
  result = [];
  x = b;
  while ((that = f(x)) != null) {
    result.push(that[0]);
    x = that[1];
  }
  return result;
});
concat = function(xss){
  return [].concat.apply([], xss);
};
concatMap = curry$$1(function(f, xs){
  var x;
  return [].concat.apply([], (function(){
    var i$, ref$, len$, results$ = [];
    for (i$ = 0, len$ = (ref$ = xs).length; i$ < len$; ++i$) {
      x = ref$[i$];
      results$.push(f(x));
    }
    return results$;
  }()));
});
flatten = function(xs){
  var x;
  return [].concat.apply([], (function(){
    var i$, ref$, len$, results$ = [];
    for (i$ = 0, len$ = (ref$ = xs).length; i$ < len$; ++i$) {
      x = ref$[i$];
      if (toString$$1.call(x).slice(8, -1) === 'Array') {
        results$.push(flatten(x));
      } else {
        results$.push(x);
      }
    }
    return results$;
  }()));
};
difference = function(xs){
  var yss, res$, i$, to$, results, len$, x, j$, len1$, ys;
  res$ = [];
  for (i$ = 1, to$ = arguments.length; i$ < to$; ++i$) {
    res$.push(arguments[i$]);
  }
  yss = res$;
  results = [];
  outer: for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    for (j$ = 0, len1$ = yss.length; j$ < len1$; ++j$) {
      ys = yss[j$];
      if (in$(x, ys)) {
        continue outer;
      }
    }
    results.push(x);
  }
  return results;
};
intersection = function(xs){
  var yss, res$, i$, to$, results, len$, x, j$, len1$, ys;
  res$ = [];
  for (i$ = 1, to$ = arguments.length; i$ < to$; ++i$) {
    res$.push(arguments[i$]);
  }
  yss = res$;
  results = [];
  outer: for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    for (j$ = 0, len1$ = yss.length; j$ < len1$; ++j$) {
      ys = yss[j$];
      if (!in$(x, ys)) {
        continue outer;
      }
    }
    results.push(x);
  }
  return results;
};
union = function(){
  var xss, res$, i$, to$, results, len$, xs, j$, len1$, x;
  res$ = [];
  for (i$ = 0, to$ = arguments.length; i$ < to$; ++i$) {
    res$.push(arguments[i$]);
  }
  xss = res$;
  results = [];
  for (i$ = 0, len$ = xss.length; i$ < len$; ++i$) {
    xs = xss[i$];
    for (j$ = 0, len1$ = xs.length; j$ < len1$; ++j$) {
      x = xs[j$];
      if (!in$(x, results)) {
        results.push(x);
      }
    }
  }
  return results;
};
countBy = curry$$1(function(f, xs){
  var results, i$, len$, x, key;
  results = {};
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    key = f(x);
    if (key in results) {
      results[key] += 1;
    } else {
      results[key] = 1;
    }
  }
  return results;
});
groupBy = curry$$1(function(f, xs){
  var results, i$, len$, x, key;
  results = {};
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    key = f(x);
    if (key in results) {
      results[key].push(x);
    } else {
      results[key] = [x];
    }
  }
  return results;
});
andList = function(xs){
  var i$, len$, x;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    if (!x) {
      return false;
    }
  }
  return true;
};
orList = function(xs){
  var i$, len$, x;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    if (x) {
      return true;
    }
  }
  return false;
};
any = curry$$1(function(f, xs){
  var i$, len$, x;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    if (f(x)) {
      return true;
    }
  }
  return false;
});
all = curry$$1(function(f, xs){
  var i$, len$, x;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    if (!f(x)) {
      return false;
    }
  }
  return true;
});
sort = function(xs){
  return xs.concat().sort(function(x, y){
    if (x > y) {
      return 1;
    } else if (x < y) {
      return -1;
    } else {
      return 0;
    }
  });
};
sortWith = curry$$1(function(f, xs){
  return xs.concat().sort(f);
});
sortBy = curry$$1(function(f, xs){
  return xs.concat().sort(function(x, y){
    if (f(x) > f(y)) {
      return 1;
    } else if (f(x) < f(y)) {
      return -1;
    } else {
      return 0;
    }
  });
});
sum = function(xs){
  var result, i$, len$, x;
  result = 0;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    result += x;
  }
  return result;
};
product = function(xs){
  var result, i$, len$, x;
  result = 1;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    result *= x;
  }
  return result;
};
mean = average = function(xs){
  var sum, i$, len$, x;
  sum = 0;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    sum += x;
  }
  return sum / xs.length;
};
maximum = function(xs){
  var max, i$, ref$, len$, x;
  max = xs[0];
  for (i$ = 0, len$ = (ref$ = xs.slice(1)).length; i$ < len$; ++i$) {
    x = ref$[i$];
    if (x > max) {
      max = x;
    }
  }
  return max;
};
minimum = function(xs){
  var min, i$, ref$, len$, x;
  min = xs[0];
  for (i$ = 0, len$ = (ref$ = xs.slice(1)).length; i$ < len$; ++i$) {
    x = ref$[i$];
    if (x < min) {
      min = x;
    }
  }
  return min;
};
maximumBy = curry$$1(function(f, xs){
  var max, i$, ref$, len$, x;
  max = xs[0];
  for (i$ = 0, len$ = (ref$ = xs.slice(1)).length; i$ < len$; ++i$) {
    x = ref$[i$];
    if (f(x) > f(max)) {
      max = x;
    }
  }
  return max;
});
minimumBy = curry$$1(function(f, xs){
  var min, i$, ref$, len$, x;
  min = xs[0];
  for (i$ = 0, len$ = (ref$ = xs.slice(1)).length; i$ < len$; ++i$) {
    x = ref$[i$];
    if (f(x) < f(min)) {
      min = x;
    }
  }
  return min;
});
scan = scanl = curry$$1(function(f, memo, xs){
  var last, x;
  last = memo;
  return [memo].concat((function(){
    var i$, ref$, len$, results$ = [];
    for (i$ = 0, len$ = (ref$ = xs).length; i$ < len$; ++i$) {
      x = ref$[i$];
      results$.push(last = f(last, x));
    }
    return results$;
  }()));
});
scan1 = scanl1 = curry$$1(function(f, xs){
  if (!xs.length) {
    return;
  }
  return scan(f, xs[0], xs.slice(1));
});
scanr = curry$$1(function(f, memo, xs){
  xs = xs.concat().reverse();
  return scan(f, memo, xs).reverse();
});
scanr1 = curry$$1(function(f, xs){
  if (!xs.length) {
    return;
  }
  xs = xs.concat().reverse();
  return scan(f, xs[0], xs.slice(1)).reverse();
});
slice = curry$$1(function(x, y, xs){
  return xs.slice(x, y);
});
take = curry$$1(function(n, xs){
  if (n <= 0) {
    return xs.slice(0, 0);
  } else {
    return xs.slice(0, n);
  }
});
drop = curry$$1(function(n, xs){
  if (n <= 0) {
    return xs;
  } else {
    return xs.slice(n);
  }
});
splitAt = curry$$1(function(n, xs){
  return [take(n, xs), drop(n, xs)];
});
takeWhile = curry$$1(function(p, xs){
  var len, i;
  len = xs.length;
  if (!len) {
    return xs;
  }
  i = 0;
  while (i < len && p(xs[i])) {
    i += 1;
  }
  return xs.slice(0, i);
});
dropWhile = curry$$1(function(p, xs){
  var len, i;
  len = xs.length;
  if (!len) {
    return xs;
  }
  i = 0;
  while (i < len && p(xs[i])) {
    i += 1;
  }
  return xs.slice(i);
});
span = curry$$1(function(p, xs){
  return [takeWhile(p, xs), dropWhile(p, xs)];
});
breakList = curry$$1(function(p, xs){
  return span(compose$(p, not$), xs);
});
zip = curry$$1(function(xs, ys){
  var result, len, i$, len$, i, x;
  result = [];
  len = ys.length;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    i = i$;
    x = xs[i$];
    if (i === len) {
      break;
    }
    result.push([x, ys[i]]);
  }
  return result;
});
zipWith = curry$$1(function(f, xs, ys){
  var result, len, i$, len$, i, x;
  result = [];
  len = ys.length;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    i = i$;
    x = xs[i$];
    if (i === len) {
      break;
    }
    result.push(f(x, ys[i]));
  }
  return result;
});
zipAll = function(){
  var xss, res$, i$, to$, minLength, len$, xs, ref$, i, lresult$, j$, results$ = [];
  res$ = [];
  for (i$ = 0, to$ = arguments.length; i$ < to$; ++i$) {
    res$.push(arguments[i$]);
  }
  xss = res$;
  minLength = undefined;
  for (i$ = 0, len$ = xss.length; i$ < len$; ++i$) {
    xs = xss[i$];
    minLength <= (ref$ = xs.length) || (minLength = ref$);
  }
  for (i$ = 0; i$ < minLength; ++i$) {
    i = i$;
    lresult$ = [];
    for (j$ = 0, len$ = xss.length; j$ < len$; ++j$) {
      xs = xss[j$];
      lresult$.push(xs[i]);
    }
    results$.push(lresult$);
  }
  return results$;
};
zipAllWith = function(f){
  var xss, res$, i$, to$, minLength, len$, xs, ref$, i, results$ = [];
  res$ = [];
  for (i$ = 1, to$ = arguments.length; i$ < to$; ++i$) {
    res$.push(arguments[i$]);
  }
  xss = res$;
  minLength = undefined;
  for (i$ = 0, len$ = xss.length; i$ < len$; ++i$) {
    xs = xss[i$];
    minLength <= (ref$ = xs.length) || (minLength = ref$);
  }
  for (i$ = 0; i$ < minLength; ++i$) {
    i = i$;
    results$.push(f.apply(null, (fn$())));
  }
  return results$;
  function fn$(){
    var i$, ref$, len$, results$ = [];
    for (i$ = 0, len$ = (ref$ = xss).length; i$ < len$; ++i$) {
      xs = ref$[i$];
      results$.push(xs[i]);
    }
    return results$;
  }
};
at = curry$$1(function(n, xs){
  if (n < 0) {
    return xs[xs.length + n];
  } else {
    return xs[n];
  }
});
elemIndex = curry$$1(function(el, xs){
  var i$, len$, i, x;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    i = i$;
    x = xs[i$];
    if (x === el) {
      return i;
    }
  }
});
elemIndices = curry$$1(function(el, xs){
  var i$, len$, i, x, results$ = [];
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    i = i$;
    x = xs[i$];
    if (x === el) {
      results$.push(i);
    }
  }
  return results$;
});
findIndex = curry$$1(function(f, xs){
  var i$, len$, i, x;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    i = i$;
    x = xs[i$];
    if (f(x)) {
      return i;
    }
  }
});
findIndices = curry$$1(function(f, xs){
  var i$, len$, i, x, results$ = [];
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    i = i$;
    x = xs[i$];
    if (f(x)) {
      results$.push(i);
    }
  }
  return results$;
});
var List = {
  each: each,
  map: map,
  filter: filter,
  compact: compact,
  reject: reject,
  remove: remove,
  partition: partition,
  find: find,
  head: head,
  first: first,
  tail: tail,
  last: last,
  initial: initial,
  empty: empty,
  reverse: reverse,
  difference: difference,
  intersection: intersection,
  union: union,
  countBy: countBy,
  groupBy: groupBy,
  fold: fold,
  fold1: fold1,
  foldl: foldl,
  foldl1: foldl1,
  foldr: foldr,
  foldr1: foldr1,
  unfoldr: unfoldr,
  andList: andList,
  orList: orList,
  any: any,
  all: all,
  unique: unique,
  uniqueBy: uniqueBy,
  sort: sort,
  sortWith: sortWith,
  sortBy: sortBy,
  sum: sum,
  product: product,
  mean: mean,
  average: average,
  concat: concat,
  concatMap: concatMap,
  flatten: flatten,
  maximum: maximum,
  minimum: minimum,
  maximumBy: maximumBy,
  minimumBy: minimumBy,
  scan: scan,
  scan1: scan1,
  scanl: scanl,
  scanl1: scanl1,
  scanr: scanr,
  scanr1: scanr1,
  slice: slice,
  take: take,
  drop: drop,
  splitAt: splitAt,
  takeWhile: takeWhile,
  dropWhile: dropWhile,
  span: span,
  breakList: breakList,
  zip: zip,
  zipWith: zipWith,
  zipAll: zipAll,
  zipAllWith: zipAllWith,
  at: at,
  elemIndex: elemIndex,
  elemIndices: elemIndices,
  findIndex: findIndex,
  findIndices: findIndices
};
function curry$$1(f, bound){
  var context,
  _curry = function(args) {
    return f.length > 1 ? function(){
      var params = args ? args.concat() : [];
      context = bound ? context || this : this;
      return params.push.apply(params, arguments) <
          f.length && arguments.length ?
        _curry.call(context, params) : f.apply(context, params);
    } : f;
  };
  return _curry();
}
function in$(x, xs){
  var i = -1, l = xs.length >>> 0;
  while (++i < l) if (x === xs[i]) return true;
  return false;
}
function compose$() {
  var functions = arguments;
  return function() {
    var i, result;
    result = functions[0].apply(this, arguments);
    for (i = 1; i < functions.length; ++i) {
      result = functions[i](result);
    }
    return result;
  };
}
function not$(x){ return !x; }

// Generated by LiveScript 1.6.0
var values, keys, pairsToObj, objToPairs, listsToObj, objToLists, empty$1, each$1, map$1, compact$1, filter$1, reject$1, partition$1, find$1;
values = function(object){
  var i$, x, results$ = [];
  for (i$ in object) {
    x = object[i$];
    results$.push(x);
  }
  return results$;
};
keys = function(object){
  var x, results$ = [];
  for (x in object) {
    results$.push(x);
  }
  return results$;
};
pairsToObj = function(object){
  var i$, len$, x, resultObj$ = {};
  for (i$ = 0, len$ = object.length; i$ < len$; ++i$) {
    x = object[i$];
    resultObj$[x[0]] = x[1];
  }
  return resultObj$;
};
objToPairs = function(object){
  var key, value, results$ = [];
  for (key in object) {
    value = object[key];
    results$.push([key, value]);
  }
  return results$;
};
listsToObj = curry$$2(function(keys, values){
  var i$, len$, i, key, resultObj$ = {};
  for (i$ = 0, len$ = keys.length; i$ < len$; ++i$) {
    i = i$;
    key = keys[i$];
    resultObj$[key] = values[i];
  }
  return resultObj$;
});
objToLists = function(object){
  var keys, values, key, value;
  keys = [];
  values = [];
  for (key in object) {
    value = object[key];
    keys.push(key);
    values.push(value);
  }
  return [keys, values];
};
empty$1 = function(object){
  var x;
  for (x in object) {
    return false;
  }
  return true;
};
each$1 = curry$$2(function(f, object){
  var i$, x;
  for (i$ in object) {
    x = object[i$];
    f(x);
  }
  return object;
});
map$1 = curry$$2(function(f, object){
  var k, x, resultObj$ = {};
  for (k in object) {
    x = object[k];
    resultObj$[k] = f(x);
  }
  return resultObj$;
});
compact$1 = function(object){
  var k, x, resultObj$ = {};
  for (k in object) {
    x = object[k];
    if (x) {
      resultObj$[k] = x;
    }
  }
  return resultObj$;
};
filter$1 = curry$$2(function(f, object){
  var k, x, resultObj$ = {};
  for (k in object) {
    x = object[k];
    if (f(x)) {
      resultObj$[k] = x;
    }
  }
  return resultObj$;
});
reject$1 = curry$$2(function(f, object){
  var k, x, resultObj$ = {};
  for (k in object) {
    x = object[k];
    if (!f(x)) {
      resultObj$[k] = x;
    }
  }
  return resultObj$;
});
partition$1 = curry$$2(function(f, object){
  var passed, failed, k, x;
  passed = {};
  failed = {};
  for (k in object) {
    x = object[k];
    (f(x) ? passed : failed)[k] = x;
  }
  return [passed, failed];
});
find$1 = curry$$2(function(f, object){
  var i$, x;
  for (i$ in object) {
    x = object[i$];
    if (f(x)) {
      return x;
    }
  }
});
var Obj = {
  values: values,
  keys: keys,
  pairsToObj: pairsToObj,
  objToPairs: objToPairs,
  listsToObj: listsToObj,
  objToLists: objToLists,
  empty: empty$1,
  each: each$1,
  map: map$1,
  filter: filter$1,
  compact: compact$1,
  reject: reject$1,
  partition: partition$1,
  find: find$1
};
function curry$$2(f, bound){
  var context,
  _curry = function(args) {
    return f.length > 1 ? function(){
      var params = args ? args.concat() : [];
      context = bound ? context || this : this;
      return params.push.apply(params, arguments) <
          f.length && arguments.length ?
        _curry.call(context, params) : f.apply(context, params);
    } : f;
  };
  return _curry();
}

// Generated by LiveScript 1.6.0
var split, join, lines, unlines, words, unwords, chars, unchars, reverse$1, repeat, capitalize, camelize, dasherize;
split = curry$$3(function(sep, str){
  return str.split(sep);
});
join = curry$$3(function(sep, xs){
  return xs.join(sep);
});
lines = function(str){
  if (!str.length) {
    return [];
  }
  return str.split('\n');
};
unlines = function(it){
  return it.join('\n');
};
words = function(str){
  if (!str.length) {
    return [];
  }
  return str.split(/[ ]+/);
};
unwords = function(it){
  return it.join(' ');
};
chars = function(it){
  return it.split('');
};
unchars = function(it){
  return it.join('');
};
reverse$1 = function(str){
  return str.split('').reverse().join('');
};
repeat = curry$$3(function(n, str){
  var result, i$;
  result = '';
  for (i$ = 0; i$ < n; ++i$) {
    result += str;
  }
  return result;
});
capitalize = function(str){
  return str.charAt(0).toUpperCase() + str.slice(1);
};
camelize = function(it){
  return it.replace(/[-_]+(.)?/g, function(arg$, c){
    return (c != null ? c : '').toUpperCase();
  });
};
dasherize = function(str){
  return str.replace(/([^-A-Z])([A-Z]+)/g, function(arg$, lower, upper){
    return lower + "-" + (upper.length > 1
      ? upper
      : upper.toLowerCase());
  }).replace(/^([A-Z]+)/, function(arg$, upper){
    if (upper.length > 1) {
      return upper + "-";
    } else {
      return upper.toLowerCase();
    }
  });
};
var Str = {
  split: split,
  join: join,
  lines: lines,
  unlines: unlines,
  words: words,
  unwords: unwords,
  chars: chars,
  unchars: unchars,
  reverse: reverse$1,
  repeat: repeat,
  capitalize: capitalize,
  camelize: camelize,
  dasherize: dasherize
};
function curry$$3(f, bound){
  var context,
  _curry = function(args) {
    return f.length > 1 ? function(){
      var params = args ? args.concat() : [];
      context = bound ? context || this : this;
      return params.push.apply(params, arguments) <
          f.length && arguments.length ?
        _curry.call(context, params) : f.apply(context, params);
    } : f;
  };
  return _curry();
}

// Generated by LiveScript 1.6.0
var max, min, negate, abs, signum, quot, rem, div, mod, recip, pi, tau, exp, sqrt, ln, pow, sin, tan, cos, asin, acos, atan, atan2, truncate, round, ceiling, floor, isItNaN, even, odd, gcd, lcm;
max = curry$$4(function(x$, y$){
  return x$ > y$ ? x$ : y$;
});
min = curry$$4(function(x$, y$){
  return x$ < y$ ? x$ : y$;
});
negate = function(x){
  return -x;
};
abs = Math.abs;
signum = function(x){
  if (x < 0) {
    return -1;
  } else if (x > 0) {
    return 1;
  } else {
    return 0;
  }
};
quot = curry$$4(function(x, y){
  return ~~(x / y);
});
rem = curry$$4(function(x$, y$){
  return x$ % y$;
});
div = curry$$4(function(x, y){
  return Math.floor(x / y);
});
mod = curry$$4(function(x$, y$){
  var ref$;
  return ((x$) % (ref$ = y$) + ref$) % ref$;
});
recip = (function(it){
  return 1 / it;
});
pi = Math.PI;
tau = pi * 2;
exp = Math.exp;
sqrt = Math.sqrt;
ln = Math.log;
pow = curry$$4(function(x$, y$){
  return Math.pow(x$, y$);
});
sin = Math.sin;
tan = Math.tan;
cos = Math.cos;
asin = Math.asin;
acos = Math.acos;
atan = Math.atan;
atan2 = curry$$4(function(x, y){
  return Math.atan2(x, y);
});
truncate = function(x){
  return ~~x;
};
round = Math.round;
ceiling = Math.ceil;
floor = Math.floor;
isItNaN = function(x){
  return x !== x;
};
even = function(x){
  return x % 2 === 0;
};
odd = function(x){
  return x % 2 !== 0;
};
gcd = curry$$4(function(x, y){
  var z;
  x = Math.abs(x);
  y = Math.abs(y);
  while (y !== 0) {
    z = x % y;
    x = y;
    y = z;
  }
  return x;
});
lcm = curry$$4(function(x, y){
  return Math.abs(Math.floor(x / gcd(x, y) * y));
});
var Num = {
  max: max,
  min: min,
  negate: negate,
  abs: abs,
  signum: signum,
  quot: quot,
  rem: rem,
  div: div,
  mod: mod,
  recip: recip,
  pi: pi,
  tau: tau,
  exp: exp,
  sqrt: sqrt,
  ln: ln,
  pow: pow,
  sin: sin,
  tan: tan,
  cos: cos,
  acos: acos,
  asin: asin,
  atan: atan,
  atan2: atan2,
  truncate: truncate,
  round: round,
  ceiling: ceiling,
  floor: floor,
  isItNaN: isItNaN,
  even: even,
  odd: odd,
  gcd: gcd,
  lcm: lcm
};
function curry$$4(f, bound){
  var context,
  _curry = function(args) {
    return f.length > 1 ? function(){
      var params = args ? args.concat() : [];
      context = bound ? context || this : this;
      return params.push.apply(params, arguments) <
          f.length && arguments.length ?
        _curry.call(context, params) : f.apply(context, params);
    } : f;
  };
  return _curry();
}

// Generated by LiveScript 1.6.0
var Func$1, List$1, Obj$1, Str$1, Num$1, id, isType, replicate, prelude, toString$$2 = {}.toString;
Func$1 = Func;
List$1 = List;
Obj$1 = Obj;
Str$1 = Str;
Num$1 = Num;
id = function(x){
  return x;
};
isType = curry$$5(function(type, x){
  return toString$$2.call(x).slice(8, -1) === type;
});
replicate = curry$$5(function(n, x){
  var i$, results$ = [];
  for (i$ = 0; i$ < n; ++i$) {
    results$.push(x);
  }
  return results$;
});
Str$1.empty = List$1.empty;
Str$1.slice = List$1.slice;
Str$1.take = List$1.take;
Str$1.drop = List$1.drop;
Str$1.splitAt = List$1.splitAt;
Str$1.takeWhile = List$1.takeWhile;
Str$1.dropWhile = List$1.dropWhile;
Str$1.span = List$1.span;
Str$1.breakStr = List$1.breakList;
prelude = {
  Func: Func$1,
  List: List$1,
  Obj: Obj$1,
  Str: Str$1,
  Num: Num$1,
  id: id,
  isType: isType,
  replicate: replicate
};
prelude.each = List$1.each;
prelude.map = List$1.map;
prelude.filter = List$1.filter;
prelude.compact = List$1.compact;
prelude.reject = List$1.reject;
prelude.partition = List$1.partition;
prelude.find = List$1.find;
prelude.head = List$1.head;
prelude.first = List$1.first;
prelude.tail = List$1.tail;
prelude.last = List$1.last;
prelude.initial = List$1.initial;
prelude.empty = List$1.empty;
prelude.reverse = List$1.reverse;
prelude.difference = List$1.difference;
prelude.intersection = List$1.intersection;
prelude.union = List$1.union;
prelude.countBy = List$1.countBy;
prelude.groupBy = List$1.groupBy;
prelude.fold = List$1.fold;
prelude.foldl = List$1.foldl;
prelude.fold1 = List$1.fold1;
prelude.foldl1 = List$1.foldl1;
prelude.foldr = List$1.foldr;
prelude.foldr1 = List$1.foldr1;
prelude.unfoldr = List$1.unfoldr;
prelude.andList = List$1.andList;
prelude.orList = List$1.orList;
prelude.any = List$1.any;
prelude.all = List$1.all;
prelude.unique = List$1.unique;
prelude.uniqueBy = List$1.uniqueBy;
prelude.sort = List$1.sort;
prelude.sortWith = List$1.sortWith;
prelude.sortBy = List$1.sortBy;
prelude.sum = List$1.sum;
prelude.product = List$1.product;
prelude.mean = List$1.mean;
prelude.average = List$1.average;
prelude.concat = List$1.concat;
prelude.concatMap = List$1.concatMap;
prelude.flatten = List$1.flatten;
prelude.maximum = List$1.maximum;
prelude.minimum = List$1.minimum;
prelude.maximumBy = List$1.maximumBy;
prelude.minimumBy = List$1.minimumBy;
prelude.scan = List$1.scan;
prelude.scanl = List$1.scanl;
prelude.scan1 = List$1.scan1;
prelude.scanl1 = List$1.scanl1;
prelude.scanr = List$1.scanr;
prelude.scanr1 = List$1.scanr1;
prelude.slice = List$1.slice;
prelude.take = List$1.take;
prelude.drop = List$1.drop;
prelude.splitAt = List$1.splitAt;
prelude.takeWhile = List$1.takeWhile;
prelude.dropWhile = List$1.dropWhile;
prelude.span = List$1.span;
prelude.breakList = List$1.breakList;
prelude.zip = List$1.zip;
prelude.zipWith = List$1.zipWith;
prelude.zipAll = List$1.zipAll;
prelude.zipAllWith = List$1.zipAllWith;
prelude.at = List$1.at;
prelude.elemIndex = List$1.elemIndex;
prelude.elemIndices = List$1.elemIndices;
prelude.findIndex = List$1.findIndex;
prelude.findIndices = List$1.findIndices;
prelude.apply = Func$1.apply;
prelude.curry = Func$1.curry;
prelude.flip = Func$1.flip;
prelude.fix = Func$1.fix;
prelude.over = Func$1.over;
prelude.split = Str$1.split;
prelude.join = Str$1.join;
prelude.lines = Str$1.lines;
prelude.unlines = Str$1.unlines;
prelude.words = Str$1.words;
prelude.unwords = Str$1.unwords;
prelude.chars = Str$1.chars;
prelude.unchars = Str$1.unchars;
prelude.repeat = Str$1.repeat;
prelude.capitalize = Str$1.capitalize;
prelude.camelize = Str$1.camelize;
prelude.dasherize = Str$1.dasherize;
prelude.values = Obj$1.values;
prelude.keys = Obj$1.keys;
prelude.pairsToObj = Obj$1.pairsToObj;
prelude.objToPairs = Obj$1.objToPairs;
prelude.listsToObj = Obj$1.listsToObj;
prelude.objToLists = Obj$1.objToLists;
prelude.max = Num$1.max;
prelude.min = Num$1.min;
prelude.negate = Num$1.negate;
prelude.abs = Num$1.abs;
prelude.signum = Num$1.signum;
prelude.quot = Num$1.quot;
prelude.rem = Num$1.rem;
prelude.div = Num$1.div;
prelude.mod = Num$1.mod;
prelude.recip = Num$1.recip;
prelude.pi = Num$1.pi;
prelude.tau = Num$1.tau;
prelude.exp = Num$1.exp;
prelude.sqrt = Num$1.sqrt;
prelude.ln = Num$1.ln;
prelude.pow = Num$1.pow;
prelude.sin = Num$1.sin;
prelude.tan = Num$1.tan;
prelude.cos = Num$1.cos;
prelude.acos = Num$1.acos;
prelude.asin = Num$1.asin;
prelude.atan = Num$1.atan;
prelude.atan2 = Num$1.atan2;
prelude.truncate = Num$1.truncate;
prelude.round = Num$1.round;
prelude.ceiling = Num$1.ceiling;
prelude.floor = Num$1.floor;
prelude.isItNaN = Num$1.isItNaN;
prelude.even = Num$1.even;
prelude.odd = Num$1.odd;
prelude.gcd = Num$1.gcd;
prelude.lcm = Num$1.lcm;
prelude.VERSION = '1.2.1';
var lib = prelude;
function curry$$5(f, bound){
  var context,
  _curry = function(args) {
    return f.length > 1 ? function(){
      var params = args ? args.concat() : [];
      context = bound ? context || this : this;
      return params.push.apply(params, arguments) <
          f.length && arguments.length ?
        _curry.call(context, params) : f.apply(context, params);
    } : f;
  };
  return _curry();
}

// Generated by LiveScript 1.4.0
var apply$1, curry$1, flip$1, fix$1, over$1, memoize$1, slice$ = [].slice, toString$$3 = {}.toString;
apply$1 = curry$$6(function(f, list){
  return f.apply(null, list);
});
curry$1 = function(f){
  return curry$$6(f);
};
flip$1 = curry$$6(function(f, x, y){
  return f(y, x);
});
fix$1 = function(f){
  return function(g){
    return function(){
      return f(g(g)).apply(null, arguments);
    };
  }(function(g){
    return function(){
      return f(g(g)).apply(null, arguments);
    };
  });
};
over$1 = curry$$6(function(f, g, x, y){
  return f(g(x), g(y));
});
memoize$1 = function(f){
  var memo;
  memo = {};
  return function(){
    var args, key, arg;
    args = slice$.call(arguments);
    key = (function(){
      var i$, ref$, len$, results$ = [];
      for (i$ = 0, len$ = (ref$ = args).length; i$ < len$; ++i$) {
        arg = ref$[i$];
        results$.push(arg + toString$$3.call(arg).slice(8, -1));
      }
      return results$;
    }()).join('');
    return memo[key] = key in memo
      ? memo[key]
      : f.apply(null, args);
  };
};
var Func$2 = {
  curry: curry$1,
  flip: flip$1,
  fix: fix$1,
  apply: apply$1,
  over: over$1,
  memoize: memoize$1
};
function curry$$6(f, bound){
  var context,
  _curry = function(args) {
    return f.length > 1 ? function(){
      var params = args ? args.concat() : [];
      context = bound ? context || this : this;
      return params.push.apply(params, arguments) <
          f.length && arguments.length ?
        _curry.call(context, params) : f.apply(context, params);
    } : f;
  };
  return _curry();
}

// Generated by LiveScript 1.4.0
var each$2, map$2, compact$2, filter$2, reject$2, partition$2, find$2, head$1, first$1, tail$1, last$1, initial$1, empty$2, reverse$2, unique$1, uniqueBy$1, fold$1, foldl$1, fold1$1, foldl1$1, foldr$1, foldr1$1, unfoldr$1, concat$1, concatMap$1, flatten$1, difference$1, intersection$1, union$1, countBy$1, groupBy$1, andList$1, orList$1, any$1, all$1, sort$1, sortWith$1, sortBy$1, sum$1, product$1, mean$1, average$1, maximum$1, minimum$1, maximumBy$1, minimumBy$1, scan$1, scanl$1, scan1$1, scanl1$1, scanr$1, scanr1$1, slice$1, take$1, drop$1, splitAt$1, takeWhile$1, dropWhile$1, span$1, breakList$1, zip$1, zipWith$1, zipAll$1, zipAllWith$1, at$1, elemIndex$1, elemIndices$1, findIndex$1, findIndices$1, toString$$4 = {}.toString, slice$$1 = [].slice;
each$2 = curry$$7(function(f, xs){
  var i$, len$, x;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    f(x);
  }
  return xs;
});
map$2 = curry$$7(function(f, xs){
  var i$, len$, x, results$ = [];
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    results$.push(f(x));
  }
  return results$;
});
compact$2 = function(xs){
  var i$, len$, x, results$ = [];
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    if (x) {
      results$.push(x);
    }
  }
  return results$;
};
filter$2 = curry$$7(function(f, xs){
  var i$, len$, x, results$ = [];
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    if (f(x)) {
      results$.push(x);
    }
  }
  return results$;
});
reject$2 = curry$$7(function(f, xs){
  var i$, len$, x, results$ = [];
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    if (!f(x)) {
      results$.push(x);
    }
  }
  return results$;
});
partition$2 = curry$$7(function(f, xs){
  var passed, failed, i$, len$, x;
  passed = [];
  failed = [];
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    (f(x) ? passed : failed).push(x);
  }
  return [passed, failed];
});
find$2 = curry$$7(function(f, xs){
  var i$, len$, x;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    if (f(x)) {
      return x;
    }
  }
});
head$1 = first$1 = function(xs){
  return xs[0];
};
tail$1 = function(xs){
  if (!xs.length) {
    return;
  }
  return xs.slice(1);
};
last$1 = function(xs){
  return xs[xs.length - 1];
};
initial$1 = function(xs){
  if (!xs.length) {
    return;
  }
  return xs.slice(0, -1);
};
empty$2 = function(xs){
  return !xs.length;
};
reverse$2 = function(xs){
  return xs.concat().reverse();
};
unique$1 = function(xs){
  var result, i$, len$, x;
  result = [];
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    if (!in$$1(x, result)) {
      result.push(x);
    }
  }
  return result;
};
uniqueBy$1 = curry$$7(function(f, xs){
  var seen, i$, len$, x, val, results$ = [];
  seen = [];
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    val = f(x);
    if (in$$1(val, seen)) {
      continue;
    }
    seen.push(val);
    results$.push(x);
  }
  return results$;
});
fold$1 = foldl$1 = curry$$7(function(f, memo, xs){
  var i$, len$, x;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    memo = f(memo, x);
  }
  return memo;
});
fold1$1 = foldl1$1 = curry$$7(function(f, xs){
  return fold$1(f, xs[0], xs.slice(1));
});
foldr$1 = curry$$7(function(f, memo, xs){
  var i$, x;
  for (i$ = xs.length - 1; i$ >= 0; --i$) {
    x = xs[i$];
    memo = f(x, memo);
  }
  return memo;
});
foldr1$1 = curry$$7(function(f, xs){
  return foldr$1(f, xs[xs.length - 1], xs.slice(0, -1));
});
unfoldr$1 = curry$$7(function(f, b){
  var result, x, that;
  result = [];
  x = b;
  while ((that = f(x)) != null) {
    result.push(that[0]);
    x = that[1];
  }
  return result;
});
concat$1 = function(xss){
  return [].concat.apply([], xss);
};
concatMap$1 = curry$$7(function(f, xs){
  var x;
  return [].concat.apply([], (function(){
    var i$, ref$, len$, results$ = [];
    for (i$ = 0, len$ = (ref$ = xs).length; i$ < len$; ++i$) {
      x = ref$[i$];
      results$.push(f(x));
    }
    return results$;
  }()));
});
flatten$1 = function(xs){
  var x;
  return [].concat.apply([], (function(){
    var i$, ref$, len$, results$ = [];
    for (i$ = 0, len$ = (ref$ = xs).length; i$ < len$; ++i$) {
      x = ref$[i$];
      if (toString$$4.call(x).slice(8, -1) === 'Array') {
        results$.push(flatten$1(x));
      } else {
        results$.push(x);
      }
    }
    return results$;
  }()));
};
difference$1 = function(xs){
  var yss, results, i$, len$, x, j$, len1$, ys;
  yss = slice$$1.call(arguments, 1);
  results = [];
  outer: for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    for (j$ = 0, len1$ = yss.length; j$ < len1$; ++j$) {
      ys = yss[j$];
      if (in$$1(x, ys)) {
        continue outer;
      }
    }
    results.push(x);
  }
  return results;
};
intersection$1 = function(xs){
  var yss, results, i$, len$, x, j$, len1$, ys;
  yss = slice$$1.call(arguments, 1);
  results = [];
  outer: for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    for (j$ = 0, len1$ = yss.length; j$ < len1$; ++j$) {
      ys = yss[j$];
      if (!in$$1(x, ys)) {
        continue outer;
      }
    }
    results.push(x);
  }
  return results;
};
union$1 = function(){
  var xss, results, i$, len$, xs, j$, len1$, x;
  xss = slice$$1.call(arguments);
  results = [];
  for (i$ = 0, len$ = xss.length; i$ < len$; ++i$) {
    xs = xss[i$];
    for (j$ = 0, len1$ = xs.length; j$ < len1$; ++j$) {
      x = xs[j$];
      if (!in$$1(x, results)) {
        results.push(x);
      }
    }
  }
  return results;
};
countBy$1 = curry$$7(function(f, xs){
  var results, i$, len$, x, key;
  results = {};
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    key = f(x);
    if (key in results) {
      results[key] += 1;
    } else {
      results[key] = 1;
    }
  }
  return results;
});
groupBy$1 = curry$$7(function(f, xs){
  var results, i$, len$, x, key;
  results = {};
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    key = f(x);
    if (key in results) {
      results[key].push(x);
    } else {
      results[key] = [x];
    }
  }
  return results;
});
andList$1 = function(xs){
  var i$, len$, x;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    if (!x) {
      return false;
    }
  }
  return true;
};
orList$1 = function(xs){
  var i$, len$, x;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    if (x) {
      return true;
    }
  }
  return false;
};
any$1 = curry$$7(function(f, xs){
  var i$, len$, x;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    if (f(x)) {
      return true;
    }
  }
  return false;
});
all$1 = curry$$7(function(f, xs){
  var i$, len$, x;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    if (!f(x)) {
      return false;
    }
  }
  return true;
});
sort$1 = function(xs){
  return xs.concat().sort(function(x, y){
    if (x > y) {
      return 1;
    } else if (x < y) {
      return -1;
    } else {
      return 0;
    }
  });
};
sortWith$1 = curry$$7(function(f, xs){
  return xs.concat().sort(f);
});
sortBy$1 = curry$$7(function(f, xs){
  return xs.concat().sort(function(x, y){
    if (f(x) > f(y)) {
      return 1;
    } else if (f(x) < f(y)) {
      return -1;
    } else {
      return 0;
    }
  });
});
sum$1 = function(xs){
  var result, i$, len$, x;
  result = 0;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    result += x;
  }
  return result;
};
product$1 = function(xs){
  var result, i$, len$, x;
  result = 1;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    result *= x;
  }
  return result;
};
mean$1 = average$1 = function(xs){
  var sum, i$, len$, x;
  sum = 0;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    sum += x;
  }
  return sum / xs.length;
};
maximum$1 = function(xs){
  var max, i$, ref$, len$, x;
  max = xs[0];
  for (i$ = 0, len$ = (ref$ = xs.slice(1)).length; i$ < len$; ++i$) {
    x = ref$[i$];
    if (x > max) {
      max = x;
    }
  }
  return max;
};
minimum$1 = function(xs){
  var min, i$, ref$, len$, x;
  min = xs[0];
  for (i$ = 0, len$ = (ref$ = xs.slice(1)).length; i$ < len$; ++i$) {
    x = ref$[i$];
    if (x < min) {
      min = x;
    }
  }
  return min;
};
maximumBy$1 = curry$$7(function(f, xs){
  var max, i$, ref$, len$, x;
  max = xs[0];
  for (i$ = 0, len$ = (ref$ = xs.slice(1)).length; i$ < len$; ++i$) {
    x = ref$[i$];
    if (f(x) > f(max)) {
      max = x;
    }
  }
  return max;
});
minimumBy$1 = curry$$7(function(f, xs){
  var min, i$, ref$, len$, x;
  min = xs[0];
  for (i$ = 0, len$ = (ref$ = xs.slice(1)).length; i$ < len$; ++i$) {
    x = ref$[i$];
    if (f(x) < f(min)) {
      min = x;
    }
  }
  return min;
});
scan$1 = scanl$1 = curry$$7(function(f, memo, xs){
  var last, x;
  last = memo;
  return [memo].concat((function(){
    var i$, ref$, len$, results$ = [];
    for (i$ = 0, len$ = (ref$ = xs).length; i$ < len$; ++i$) {
      x = ref$[i$];
      results$.push(last = f(last, x));
    }
    return results$;
  }()));
});
scan1$1 = scanl1$1 = curry$$7(function(f, xs){
  if (!xs.length) {
    return;
  }
  return scan$1(f, xs[0], xs.slice(1));
});
scanr$1 = curry$$7(function(f, memo, xs){
  xs = xs.concat().reverse();
  return scan$1(f, memo, xs).reverse();
});
scanr1$1 = curry$$7(function(f, xs){
  if (!xs.length) {
    return;
  }
  xs = xs.concat().reverse();
  return scan$1(f, xs[0], xs.slice(1)).reverse();
});
slice$1 = curry$$7(function(x, y, xs){
  return xs.slice(x, y);
});
take$1 = curry$$7(function(n, xs){
  if (n <= 0) {
    return xs.slice(0, 0);
  } else {
    return xs.slice(0, n);
  }
});
drop$1 = curry$$7(function(n, xs){
  if (n <= 0) {
    return xs;
  } else {
    return xs.slice(n);
  }
});
splitAt$1 = curry$$7(function(n, xs){
  return [take$1(n, xs), drop$1(n, xs)];
});
takeWhile$1 = curry$$7(function(p, xs){
  var len, i;
  len = xs.length;
  if (!len) {
    return xs;
  }
  i = 0;
  while (i < len && p(xs[i])) {
    i += 1;
  }
  return xs.slice(0, i);
});
dropWhile$1 = curry$$7(function(p, xs){
  var len, i;
  len = xs.length;
  if (!len) {
    return xs;
  }
  i = 0;
  while (i < len && p(xs[i])) {
    i += 1;
  }
  return xs.slice(i);
});
span$1 = curry$$7(function(p, xs){
  return [takeWhile$1(p, xs), dropWhile$1(p, xs)];
});
breakList$1 = curry$$7(function(p, xs){
  return span$1(compose$$1(p, not$$1), xs);
});
zip$1 = curry$$7(function(xs, ys){
  var result, len, i$, len$, i, x;
  result = [];
  len = ys.length;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    i = i$;
    x = xs[i$];
    if (i === len) {
      break;
    }
    result.push([x, ys[i]]);
  }
  return result;
});
zipWith$1 = curry$$7(function(f, xs, ys){
  var result, len, i$, len$, i, x;
  result = [];
  len = ys.length;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    i = i$;
    x = xs[i$];
    if (i === len) {
      break;
    }
    result.push(f(x, ys[i]));
  }
  return result;
});
zipAll$1 = function(){
  var xss, minLength, i$, len$, xs, ref$, i, lresult$, j$, results$ = [];
  xss = slice$$1.call(arguments);
  minLength = undefined;
  for (i$ = 0, len$ = xss.length; i$ < len$; ++i$) {
    xs = xss[i$];
    minLength <= (ref$ = xs.length) || (minLength = ref$);
  }
  for (i$ = 0; i$ < minLength; ++i$) {
    i = i$;
    lresult$ = [];
    for (j$ = 0, len$ = xss.length; j$ < len$; ++j$) {
      xs = xss[j$];
      lresult$.push(xs[i]);
    }
    results$.push(lresult$);
  }
  return results$;
};
zipAllWith$1 = function(f){
  var xss, minLength, i$, len$, xs, ref$, i, results$ = [];
  xss = slice$$1.call(arguments, 1);
  minLength = undefined;
  for (i$ = 0, len$ = xss.length; i$ < len$; ++i$) {
    xs = xss[i$];
    minLength <= (ref$ = xs.length) || (minLength = ref$);
  }
  for (i$ = 0; i$ < minLength; ++i$) {
    i = i$;
    results$.push(f.apply(null, (fn$())));
  }
  return results$;
  function fn$(){
    var i$, ref$, len$, results$ = [];
    for (i$ = 0, len$ = (ref$ = xss).length; i$ < len$; ++i$) {
      xs = ref$[i$];
      results$.push(xs[i]);
    }
    return results$;
  }
};
at$1 = curry$$7(function(n, xs){
  if (n < 0) {
    return xs[xs.length + n];
  } else {
    return xs[n];
  }
});
elemIndex$1 = curry$$7(function(el, xs){
  var i$, len$, i, x;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    i = i$;
    x = xs[i$];
    if (x === el) {
      return i;
    }
  }
});
elemIndices$1 = curry$$7(function(el, xs){
  var i$, len$, i, x, results$ = [];
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    i = i$;
    x = xs[i$];
    if (x === el) {
      results$.push(i);
    }
  }
  return results$;
});
findIndex$1 = curry$$7(function(f, xs){
  var i$, len$, i, x;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    i = i$;
    x = xs[i$];
    if (f(x)) {
      return i;
    }
  }
});
findIndices$1 = curry$$7(function(f, xs){
  var i$, len$, i, x, results$ = [];
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    i = i$;
    x = xs[i$];
    if (f(x)) {
      results$.push(i);
    }
  }
  return results$;
});
var List$2 = {
  each: each$2,
  map: map$2,
  filter: filter$2,
  compact: compact$2,
  reject: reject$2,
  partition: partition$2,
  find: find$2,
  head: head$1,
  first: first$1,
  tail: tail$1,
  last: last$1,
  initial: initial$1,
  empty: empty$2,
  reverse: reverse$2,
  difference: difference$1,
  intersection: intersection$1,
  union: union$1,
  countBy: countBy$1,
  groupBy: groupBy$1,
  fold: fold$1,
  fold1: fold1$1,
  foldl: foldl$1,
  foldl1: foldl1$1,
  foldr: foldr$1,
  foldr1: foldr1$1,
  unfoldr: unfoldr$1,
  andList: andList$1,
  orList: orList$1,
  any: any$1,
  all: all$1,
  unique: unique$1,
  uniqueBy: uniqueBy$1,
  sort: sort$1,
  sortWith: sortWith$1,
  sortBy: sortBy$1,
  sum: sum$1,
  product: product$1,
  mean: mean$1,
  average: average$1,
  concat: concat$1,
  concatMap: concatMap$1,
  flatten: flatten$1,
  maximum: maximum$1,
  minimum: minimum$1,
  maximumBy: maximumBy$1,
  minimumBy: minimumBy$1,
  scan: scan$1,
  scan1: scan1$1,
  scanl: scanl$1,
  scanl1: scanl1$1,
  scanr: scanr$1,
  scanr1: scanr1$1,
  slice: slice$1,
  take: take$1,
  drop: drop$1,
  splitAt: splitAt$1,
  takeWhile: takeWhile$1,
  dropWhile: dropWhile$1,
  span: span$1,
  breakList: breakList$1,
  zip: zip$1,
  zipWith: zipWith$1,
  zipAll: zipAll$1,
  zipAllWith: zipAllWith$1,
  at: at$1,
  elemIndex: elemIndex$1,
  elemIndices: elemIndices$1,
  findIndex: findIndex$1,
  findIndices: findIndices$1
};
function curry$$7(f, bound){
  var context,
  _curry = function(args) {
    return f.length > 1 ? function(){
      var params = args ? args.concat() : [];
      context = bound ? context || this : this;
      return params.push.apply(params, arguments) <
          f.length && arguments.length ?
        _curry.call(context, params) : f.apply(context, params);
    } : f;
  };
  return _curry();
}
function in$$1(x, xs){
  var i = -1, l = xs.length >>> 0;
  while (++i < l) if (x === xs[i]) return true;
  return false;
}
function compose$$1() {
  var functions = arguments;
  return function() {
    var i, result;
    result = functions[0].apply(this, arguments);
    for (i = 1; i < functions.length; ++i) {
      result = functions[i](result);
    }
    return result;
  };
}
function not$$1(x){ return !x; }

// Generated by LiveScript 1.4.0
var values$1, keys$1, pairsToObj$1, objToPairs$1, listsToObj$1, objToLists$1, empty$3, each$3, map$3, compact$3, filter$3, reject$3, partition$3, find$3;
values$1 = function(object){
  var i$, x, results$ = [];
  for (i$ in object) {
    x = object[i$];
    results$.push(x);
  }
  return results$;
};
keys$1 = function(object){
  var x, results$ = [];
  for (x in object) {
    results$.push(x);
  }
  return results$;
};
pairsToObj$1 = function(object){
  var i$, len$, x, resultObj$ = {};
  for (i$ = 0, len$ = object.length; i$ < len$; ++i$) {
    x = object[i$];
    resultObj$[x[0]] = x[1];
  }
  return resultObj$;
};
objToPairs$1 = function(object){
  var key, value, results$ = [];
  for (key in object) {
    value = object[key];
    results$.push([key, value]);
  }
  return results$;
};
listsToObj$1 = curry$$8(function(keys, values){
  var i$, len$, i, key, resultObj$ = {};
  for (i$ = 0, len$ = keys.length; i$ < len$; ++i$) {
    i = i$;
    key = keys[i$];
    resultObj$[key] = values[i];
  }
  return resultObj$;
});
objToLists$1 = function(object){
  var keys, values, key, value;
  keys = [];
  values = [];
  for (key in object) {
    value = object[key];
    keys.push(key);
    values.push(value);
  }
  return [keys, values];
};
empty$3 = function(object){
  var x;
  for (x in object) {
    return false;
  }
  return true;
};
each$3 = curry$$8(function(f, object){
  var i$, x;
  for (i$ in object) {
    x = object[i$];
    f(x);
  }
  return object;
});
map$3 = curry$$8(function(f, object){
  var k, x, resultObj$ = {};
  for (k in object) {
    x = object[k];
    resultObj$[k] = f(x);
  }
  return resultObj$;
});
compact$3 = function(object){
  var k, x, resultObj$ = {};
  for (k in object) {
    x = object[k];
    if (x) {
      resultObj$[k] = x;
    }
  }
  return resultObj$;
};
filter$3 = curry$$8(function(f, object){
  var k, x, resultObj$ = {};
  for (k in object) {
    x = object[k];
    if (f(x)) {
      resultObj$[k] = x;
    }
  }
  return resultObj$;
});
reject$3 = curry$$8(function(f, object){
  var k, x, resultObj$ = {};
  for (k in object) {
    x = object[k];
    if (!f(x)) {
      resultObj$[k] = x;
    }
  }
  return resultObj$;
});
partition$3 = curry$$8(function(f, object){
  var passed, failed, k, x;
  passed = {};
  failed = {};
  for (k in object) {
    x = object[k];
    (f(x) ? passed : failed)[k] = x;
  }
  return [passed, failed];
});
find$3 = curry$$8(function(f, object){
  var i$, x;
  for (i$ in object) {
    x = object[i$];
    if (f(x)) {
      return x;
    }
  }
});
var Obj$2 = {
  values: values$1,
  keys: keys$1,
  pairsToObj: pairsToObj$1,
  objToPairs: objToPairs$1,
  listsToObj: listsToObj$1,
  objToLists: objToLists$1,
  empty: empty$3,
  each: each$3,
  map: map$3,
  filter: filter$3,
  compact: compact$3,
  reject: reject$3,
  partition: partition$3,
  find: find$3
};
function curry$$8(f, bound){
  var context,
  _curry = function(args) {
    return f.length > 1 ? function(){
      var params = args ? args.concat() : [];
      context = bound ? context || this : this;
      return params.push.apply(params, arguments) <
          f.length && arguments.length ?
        _curry.call(context, params) : f.apply(context, params);
    } : f;
  };
  return _curry();
}

// Generated by LiveScript 1.4.0
var split$1, join$1, lines$1, unlines$1, words$1, unwords$1, chars$1, unchars$1, reverse$3, repeat$1, capitalize$1, camelize$1, dasherize$1;
split$1 = curry$$9(function(sep, str){
  return str.split(sep);
});
join$1 = curry$$9(function(sep, xs){
  return xs.join(sep);
});
lines$1 = function(str){
  if (!str.length) {
    return [];
  }
  return str.split('\n');
};
unlines$1 = function(it){
  return it.join('\n');
};
words$1 = function(str){
  if (!str.length) {
    return [];
  }
  return str.split(/[ ]+/);
};
unwords$1 = function(it){
  return it.join(' ');
};
chars$1 = function(it){
  return it.split('');
};
unchars$1 = function(it){
  return it.join('');
};
reverse$3 = function(str){
  return str.split('').reverse().join('');
};
repeat$1 = curry$$9(function(n, str){
  var result, i$;
  result = '';
  for (i$ = 0; i$ < n; ++i$) {
    result += str;
  }
  return result;
});
capitalize$1 = function(str){
  return str.charAt(0).toUpperCase() + str.slice(1);
};
camelize$1 = function(it){
  return it.replace(/[-_]+(.)?/g, function(arg$, c){
    return (c != null ? c : '').toUpperCase();
  });
};
dasherize$1 = function(str){
  return str.replace(/([^-A-Z])([A-Z]+)/g, function(arg$, lower, upper){
    return lower + "-" + (upper.length > 1
      ? upper
      : upper.toLowerCase());
  }).replace(/^([A-Z]+)/, function(arg$, upper){
    if (upper.length > 1) {
      return upper + "-";
    } else {
      return upper.toLowerCase();
    }
  });
};
var Str$2 = {
  split: split$1,
  join: join$1,
  lines: lines$1,
  unlines: unlines$1,
  words: words$1,
  unwords: unwords$1,
  chars: chars$1,
  unchars: unchars$1,
  reverse: reverse$3,
  repeat: repeat$1,
  capitalize: capitalize$1,
  camelize: camelize$1,
  dasherize: dasherize$1
};
function curry$$9(f, bound){
  var context,
  _curry = function(args) {
    return f.length > 1 ? function(){
      var params = args ? args.concat() : [];
      context = bound ? context || this : this;
      return params.push.apply(params, arguments) <
          f.length && arguments.length ?
        _curry.call(context, params) : f.apply(context, params);
    } : f;
  };
  return _curry();
}

// Generated by LiveScript 1.4.0
var max$1, min$1, negate$1, abs$1, signum$1, quot$1, rem$1, div$1, mod$1, recip$1, pi$1, tau$1, exp$1, sqrt$1, ln$1, pow$1, sin$1, tan$1, cos$1, asin$1, acos$1, atan$1, atan2$1, truncate$1, round$1, ceiling$1, floor$1, isItNaN$1, even$1, odd$1, gcd$1, lcm$1;
max$1 = curry$$a(function(x$, y$){
  return x$ > y$ ? x$ : y$;
});
min$1 = curry$$a(function(x$, y$){
  return x$ < y$ ? x$ : y$;
});
negate$1 = function(x){
  return -x;
};
abs$1 = Math.abs;
signum$1 = function(x){
  if (x < 0) {
    return -1;
  } else if (x > 0) {
    return 1;
  } else {
    return 0;
  }
};
quot$1 = curry$$a(function(x, y){
  return ~~(x / y);
});
rem$1 = curry$$a(function(x$, y$){
  return x$ % y$;
});
div$1 = curry$$a(function(x, y){
  return Math.floor(x / y);
});
mod$1 = curry$$a(function(x$, y$){
  var ref$;
  return (((x$) % (ref$ = y$) + ref$) % ref$);
});
recip$1 = (function(it){
  return 1 / it;
});
pi$1 = Math.PI;
tau$1 = pi$1 * 2;
exp$1 = Math.exp;
sqrt$1 = Math.sqrt;
ln$1 = Math.log;
pow$1 = curry$$a(function(x$, y$){
  return Math.pow(x$, y$);
});
sin$1 = Math.sin;
tan$1 = Math.tan;
cos$1 = Math.cos;
asin$1 = Math.asin;
acos$1 = Math.acos;
atan$1 = Math.atan;
atan2$1 = curry$$a(function(x, y){
  return Math.atan2(x, y);
});
truncate$1 = function(x){
  return ~~x;
};
round$1 = Math.round;
ceiling$1 = Math.ceil;
floor$1 = Math.floor;
isItNaN$1 = function(x){
  return x !== x;
};
even$1 = function(x){
  return x % 2 === 0;
};
odd$1 = function(x){
  return x % 2 !== 0;
};
gcd$1 = curry$$a(function(x, y){
  var z;
  x = Math.abs(x);
  y = Math.abs(y);
  while (y !== 0) {
    z = x % y;
    x = y;
    y = z;
  }
  return x;
});
lcm$1 = curry$$a(function(x, y){
  return Math.abs(Math.floor(x / gcd$1(x, y) * y));
});
var Num$2 = {
  max: max$1,
  min: min$1,
  negate: negate$1,
  abs: abs$1,
  signum: signum$1,
  quot: quot$1,
  rem: rem$1,
  div: div$1,
  mod: mod$1,
  recip: recip$1,
  pi: pi$1,
  tau: tau$1,
  exp: exp$1,
  sqrt: sqrt$1,
  ln: ln$1,
  pow: pow$1,
  sin: sin$1,
  tan: tan$1,
  cos: cos$1,
  acos: acos$1,
  asin: asin$1,
  atan: atan$1,
  atan2: atan2$1,
  truncate: truncate$1,
  round: round$1,
  ceiling: ceiling$1,
  floor: floor$1,
  isItNaN: isItNaN$1,
  even: even$1,
  odd: odd$1,
  gcd: gcd$1,
  lcm: lcm$1
};
function curry$$a(f, bound){
  var context,
  _curry = function(args) {
    return f.length > 1 ? function(){
      var params = args ? args.concat() : [];
      context = bound ? context || this : this;
      return params.push.apply(params, arguments) <
          f.length && arguments.length ?
        _curry.call(context, params) : f.apply(context, params);
    } : f;
  };
  return _curry();
}

// Generated by LiveScript 1.4.0
var Func$3, List$3, Obj$3, Str$3, Num$3, id$1, isType$1, replicate$1, prelude$1, toString$$5 = {}.toString;
Func$3 = Func$2;
List$3 = List$2;
Obj$3 = Obj$2;
Str$3 = Str$2;
Num$3 = Num$2;
id$1 = function(x){
  return x;
};
isType$1 = curry$$b(function(type, x){
  return toString$$5.call(x).slice(8, -1) === type;
});
replicate$1 = curry$$b(function(n, x){
  var i$, results$ = [];
  for (i$ = 0; i$ < n; ++i$) {
    results$.push(x);
  }
  return results$;
});
Str$3.empty = List$3.empty;
Str$3.slice = List$3.slice;
Str$3.take = List$3.take;
Str$3.drop = List$3.drop;
Str$3.splitAt = List$3.splitAt;
Str$3.takeWhile = List$3.takeWhile;
Str$3.dropWhile = List$3.dropWhile;
Str$3.span = List$3.span;
Str$3.breakStr = List$3.breakList;
prelude$1 = {
  Func: Func$3,
  List: List$3,
  Obj: Obj$3,
  Str: Str$3,
  Num: Num$3,
  id: id$1,
  isType: isType$1,
  replicate: replicate$1
};
prelude$1.each = List$3.each;
prelude$1.map = List$3.map;
prelude$1.filter = List$3.filter;
prelude$1.compact = List$3.compact;
prelude$1.reject = List$3.reject;
prelude$1.partition = List$3.partition;
prelude$1.find = List$3.find;
prelude$1.head = List$3.head;
prelude$1.first = List$3.first;
prelude$1.tail = List$3.tail;
prelude$1.last = List$3.last;
prelude$1.initial = List$3.initial;
prelude$1.empty = List$3.empty;
prelude$1.reverse = List$3.reverse;
prelude$1.difference = List$3.difference;
prelude$1.intersection = List$3.intersection;
prelude$1.union = List$3.union;
prelude$1.countBy = List$3.countBy;
prelude$1.groupBy = List$3.groupBy;
prelude$1.fold = List$3.fold;
prelude$1.foldl = List$3.foldl;
prelude$1.fold1 = List$3.fold1;
prelude$1.foldl1 = List$3.foldl1;
prelude$1.foldr = List$3.foldr;
prelude$1.foldr1 = List$3.foldr1;
prelude$1.unfoldr = List$3.unfoldr;
prelude$1.andList = List$3.andList;
prelude$1.orList = List$3.orList;
prelude$1.any = List$3.any;
prelude$1.all = List$3.all;
prelude$1.unique = List$3.unique;
prelude$1.uniqueBy = List$3.uniqueBy;
prelude$1.sort = List$3.sort;
prelude$1.sortWith = List$3.sortWith;
prelude$1.sortBy = List$3.sortBy;
prelude$1.sum = List$3.sum;
prelude$1.product = List$3.product;
prelude$1.mean = List$3.mean;
prelude$1.average = List$3.average;
prelude$1.concat = List$3.concat;
prelude$1.concatMap = List$3.concatMap;
prelude$1.flatten = List$3.flatten;
prelude$1.maximum = List$3.maximum;
prelude$1.minimum = List$3.minimum;
prelude$1.maximumBy = List$3.maximumBy;
prelude$1.minimumBy = List$3.minimumBy;
prelude$1.scan = List$3.scan;
prelude$1.scanl = List$3.scanl;
prelude$1.scan1 = List$3.scan1;
prelude$1.scanl1 = List$3.scanl1;
prelude$1.scanr = List$3.scanr;
prelude$1.scanr1 = List$3.scanr1;
prelude$1.slice = List$3.slice;
prelude$1.take = List$3.take;
prelude$1.drop = List$3.drop;
prelude$1.splitAt = List$3.splitAt;
prelude$1.takeWhile = List$3.takeWhile;
prelude$1.dropWhile = List$3.dropWhile;
prelude$1.span = List$3.span;
prelude$1.breakList = List$3.breakList;
prelude$1.zip = List$3.zip;
prelude$1.zipWith = List$3.zipWith;
prelude$1.zipAll = List$3.zipAll;
prelude$1.zipAllWith = List$3.zipAllWith;
prelude$1.at = List$3.at;
prelude$1.elemIndex = List$3.elemIndex;
prelude$1.elemIndices = List$3.elemIndices;
prelude$1.findIndex = List$3.findIndex;
prelude$1.findIndices = List$3.findIndices;
prelude$1.apply = Func$3.apply;
prelude$1.curry = Func$3.curry;
prelude$1.flip = Func$3.flip;
prelude$1.fix = Func$3.fix;
prelude$1.over = Func$3.over;
prelude$1.split = Str$3.split;
prelude$1.join = Str$3.join;
prelude$1.lines = Str$3.lines;
prelude$1.unlines = Str$3.unlines;
prelude$1.words = Str$3.words;
prelude$1.unwords = Str$3.unwords;
prelude$1.chars = Str$3.chars;
prelude$1.unchars = Str$3.unchars;
prelude$1.repeat = Str$3.repeat;
prelude$1.capitalize = Str$3.capitalize;
prelude$1.camelize = Str$3.camelize;
prelude$1.dasherize = Str$3.dasherize;
prelude$1.values = Obj$3.values;
prelude$1.keys = Obj$3.keys;
prelude$1.pairsToObj = Obj$3.pairsToObj;
prelude$1.objToPairs = Obj$3.objToPairs;
prelude$1.listsToObj = Obj$3.listsToObj;
prelude$1.objToLists = Obj$3.objToLists;
prelude$1.max = Num$3.max;
prelude$1.min = Num$3.min;
prelude$1.negate = Num$3.negate;
prelude$1.abs = Num$3.abs;
prelude$1.signum = Num$3.signum;
prelude$1.quot = Num$3.quot;
prelude$1.rem = Num$3.rem;
prelude$1.div = Num$3.div;
prelude$1.mod = Num$3.mod;
prelude$1.recip = Num$3.recip;
prelude$1.pi = Num$3.pi;
prelude$1.tau = Num$3.tau;
prelude$1.exp = Num$3.exp;
prelude$1.sqrt = Num$3.sqrt;
prelude$1.ln = Num$3.ln;
prelude$1.pow = Num$3.pow;
prelude$1.sin = Num$3.sin;
prelude$1.tan = Num$3.tan;
prelude$1.cos = Num$3.cos;
prelude$1.acos = Num$3.acos;
prelude$1.asin = Num$3.asin;
prelude$1.atan = Num$3.atan;
prelude$1.atan2 = Num$3.atan2;
prelude$1.truncate = Num$3.truncate;
prelude$1.round = Num$3.round;
prelude$1.ceiling = Num$3.ceiling;
prelude$1.floor = Num$3.floor;
prelude$1.isItNaN = Num$3.isItNaN;
prelude$1.even = Num$3.even;
prelude$1.odd = Num$3.odd;
prelude$1.gcd = Num$3.gcd;
prelude$1.lcm = Num$3.lcm;
prelude$1.VERSION = '1.1.2';
var lib$1 = prelude$1;
function curry$$b(f, bound){
  var context,
  _curry = function(args) {
    return f.length > 1 ? function(){
      var params = args ? args.concat() : [];
      context = bound ? context || this : this;
      return params.push.apply(params, arguments) <
          f.length && arguments.length ?
        _curry.call(context, params) : f.apply(context, params);
    } : f;
  };
  return _curry();
}

// Generated by LiveScript 1.2.0
var _;
_ = lib$1;
_.regexMatch = function(regex, str){
  return str.match(regex) || [];
};
_.regexExec = function(regex, str, key){
  var tmp, results$ = [];
  key == null && (key = null);
  while (tmp = regex.exec(str)) {
    if (key != null) {
      results$.push(tmp[key]);
    } else {
      results$.push(tmp);
    }
  }
  return results$;
};
_.clone = function(it){
  return it.slice(0);
};
_.get2D = function(i, width){
  return [i % width, Math.floor(i / width)];
};
_.get1D = function(x, y, width){
  return x + y * width;
};
_.shuffle = function(arr){
  var j, x, i;
  j = x = i = arr.length;
  while (i) {
    j = Math.floor(Math.random() * i);
    x = arr[--i];
    arr[i] = arr[j];
    arr[j] = x;
  }
  return arr;
};
_.where = function(query, list){
  return _.filter(function(it){
    var k, ref$, v;
    for (k in ref$ = query) {
      v = ref$[k];
      if (it[k] !== v) {
        return false;
      }
    }
    return true;
  }, list);
};
_.batch = function(count, list){
  count = Number(count);
  if (count < 1) {
    return [];
  }
  list = list.slice(0);
  return (function(){
    var results$ = [];
    while (list.length) {
      results$.push(list.splice(0, count));
    }
    return results$;
  }());
};
_.indexBy = function(f, item){
  var list, index;
  if (_.isType('Object', item)) {
    list = _.values(item);
    index = _.elemIndex(f(list), list);
    return _.keys(item)[index];
  } else {
    return _.elemIndex(f(item), item);
  }
};
_.rand = function(min, max){
  var ref$;
  max == null && (max = null);
  if (max == null) {
    ref$ = [0, min], min = ref$[0], max = ref$[1];
  }
  return Math.floor(Math.random() * (max - min + 1) + min);
};
_.chance = function(num){
  num == null && (num = 0.5);
  return Math.random() < num;
};
_.negateIf = function(b, x){
  if (b) {
    return -x;
  } else {
    return x;
  }
};
_.chr = function(int){
  return String.fromCharCode(int);
};
_.ord = function(str){
  return str.charCodeAt(0);
};
_.isInsensitive = function(a, b){
  return a.toUpperCase() === b.toUpperCase();
};
_.capitalize = function(str){
  return str.substr(0, 1).toUpperCase() + str.substr(1);
};
_.isArray = _.isType('Array');
_.boolToInt = function(b){
  if (b) {
    return 1;
  } else {
    return 0;
  }
};
_.flipEach = _.flip(_.each);
_.flipMap = _.flip(_.map);
_.flipReject = _.flip(_.reject);
_.flipFilter = _.flip(_.filter);
_.flipSetTimeout = _.flip(_.setTimeout);
var preludeLsExtended = _;

var rand, colors, take$2, ext;
rand = uniqueRandomArray;
colors = require$$1;
take$2 = lib.take;
ext = preludeLsExtended;
var flatPalettes = function(quantity){
  var palette;
  palette = rand(colors);
  switch (quantity) {
  case 1:
  case 2:
  case 3:
  case 4:
  case 5:
    return take$2(quantity, ext.shuffle(palette()));
  default:
    return 'Please enter a valid number of colors (1 - 5).';
  }
};

export default flatPalettes;
